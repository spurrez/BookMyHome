@page "/bookings/edit"
@using BookMyHome.Application.DTO
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Booking</h2>
<hr />
@if (Booking is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Booking" OnValidSubmit="UpdateBooking" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Booking.BookingId" value="@Booking.BookingId" />
                <div class="mb-3">
                    <label for="checkin" class="form-label">CheckIn:</label>
                    <InputDate id="checkin" @bind-Value="Booking.CheckIn" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Booking.CheckIn" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="checkout" class="form-label">CheckOut:</label>
                    <InputDate id="checkout" @bind-Value="Booking.CheckOut" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Booking.CheckOut" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="status" class="form-label">Status:</label>
                    <InputSelect id="status" @bind-Value="Booking.Status" class="form-control" />
                    <ValidationMessage For="() => Booking.Status" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="guestamount" class="form-label">GuestAmount:</label>
                    <InputNumber id="guestamount" @bind-Value="Booking.GuestAmount" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Booking.GuestAmount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="specialrequests" class="form-label">SpecialRequests:</label>
                    <InputText id="specialrequests" @bind-Value="Booking.SpecialRequests" class="form-control" />
                    <ValidationMessage For="() => Booking.SpecialRequests" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="accommodationid" class="form-label">AccommodationId:</label>
                    <InputNumber id="accommodationid" @bind-Value="Booking.AccommodationId" class="form-control" />
                    <ValidationMessage For="() => Booking.AccommodationId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="guestid" class="form-label">GuestId:</label>
                    <InputNumber id="guestid" @bind-Value="Booking.GuestId" class="form-control" />
                    <ValidationMessage For="() => Booking.GuestId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/bookings">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int BookingId { get; set; }

    [SupplyParameterFromForm]
    private BookingDTO Booking { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // using var context = DbFactory.CreateDbContext();
        // Booking ??= await context.Bookings.FirstOrDefaultAsync(m => m.BookingId == BookingId);

        if (Booking is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateBooking()
    {
        // using var context = DbFactory.CreateDbContext();
        // context.Attach(Booking!).State = EntityState.Modified;

        // try
        // {
        //     await context.SaveChangesAsync();
        // }
        // catch (DbUpdateConcurrencyException)
        // {
        //     if (!BookingExists(Booking!.BookingId))
        //     {
        //         NavigationManager.NavigateTo("notfound");
        //     }
        //     else
        //     {
        //         throw;
        //     }
        // }

        NavigationManager.NavigateTo("/bookings");
    }

    // private bool BookingExists(int bookingid)
    // {
    //     using var context = DbFactory.CreateDbContext();
    //     return context.Bookings.Any(e => e.BookingId == bookingid);
    // }
}
