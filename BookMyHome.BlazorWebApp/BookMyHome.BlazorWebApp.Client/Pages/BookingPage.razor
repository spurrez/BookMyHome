@page "/create/booking"
@using BookMyHome.Application.DTO
@using BookMyHome.BlazorWebApp.Client.Interfaces
@inject IBookingServiceBlazor BookingService
@rendermode InteractiveAuto // this makes it so httpclient DI is needed in both client and server program.cs

<PageTitle>Booking</PageTitle>
<h3>Booking</h3>

@if (booking == null || editContext == null)
{
	<p>Loading...</p>
}
else
{
	@foreach (var booking in allBookings)
	{
		<p>@booking.CheckIn</p>
		<p>@booking.CheckOut</p>
	}

	<EditForm EditContext="editContext">
		<div class="col-md-6 mb-3">
			<label for="CheckIn">CheckIn</label>
			<InputDate id="CheckIn" @bind-Value="booking.CheckIn" class="form-control" />
		</div>
		<div class="col-md-6 mb-3">
			<label for="CheckOut">CheckOut</label>
			<InputDate id="CheckOut" @bind-Value="booking.CheckOut" class="form-control" />
		</div>

	</EditForm>
}


@code {
	private BookingDTO? booking;
	private IEnumerable<BookingDTO> allBookings = new List<BookingDTO>(); // this is purely defensive coding so its fine to do in frontend

	private EditContext? editContext;

	protected async override Task OnInitializedAsync()
	{
		booking = new BookingDTO();
		editContext = new EditContext(booking);

		allBookings = await BookingService.GetAllBookings();
	}
}
